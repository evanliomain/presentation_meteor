!function(e,t){"function"==typeof define&&define.amd?define(function(){return e.Reveal=t(),e.Reveal}):"object"==typeof exports?module.exports=t():e.Reveal=t()}(this,function(){"use strict";function e(e){if(t(),Ot.transforms2d||Ot.transforms3d){zt.wrapper=document.querySelector(".reveal"),zt.slides=document.querySelector(".reveal .slides"),window.addEventListener("load",W,!1);var n=wt.getQueryHash();"undefined"!=typeof n.dependencies&&delete n.dependencies,h(Ct,e),h(Ct,n),q(),r()}else{document.body.setAttribute("class","no-transforms");for(var a=g(document.getElementsByTagName("img")),i=g(document.getElementsByTagName("iframe")),o=a.concat(i),s=0,c=o.length;c>s;s++){var l=o[s];l.getAttribute("data-src")&&(l.setAttribute("src",l.getAttribute("data-src")),l.removeAttribute("data-src"))}}}function t(){Ot.transforms3d="WebkitPerspective"in document.body.style||"MozPerspective"in document.body.style||"msPerspective"in document.body.style||"OPerspective"in document.body.style||"perspective"in document.body.style,Ot.transforms2d="WebkitTransform"in document.body.style||"MozTransform"in document.body.style||"msTransform"in document.body.style||"OTransform"in document.body.style||"transform"in document.body.style,Ot.requestAnimationFrameMethod=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame,Ot.requestAnimationFrame="function"==typeof Ot.requestAnimationFrameMethod,Ot.canvas=!!document.createElement("canvas").getContext,Ot.touch=!!("ontouchstart"in window),Ot.overviewTransitions=!/Version\/[\d\.]+.*Safari/.test(navigator.userAgent),xt=/(iphone|ipod|ipad|android)/gi.test(navigator.userAgent)}function r(){function e(){a.length&&head.js.apply(null,a),n()}function t(t){head.ready(t.src.match(/([\w\d_\-]*)\.?js$|[^\\\/]*$/i)[0],function(){"function"==typeof t.callback&&t.callback.apply(this),0===--i&&e()})}for(var r=[],a=[],i=0,o=0,s=Ct.dependencies.length;s>o;o++){var c=Ct.dependencies[o];(!c.condition||c.condition())&&(c.async?a.push(c.src):r.push(c.src),t(c))}r.length?(i=r.length,head.js.apply(null,r)):e()}function n(){a(),u(),s(),ae(),p(),xe(),fe(!0),setTimeout(function(){zt.slides.classList.remove("no-transition"),Pt=!0,N("ready",{indexh:kt,indexv:Lt,currentSlide:Et})},1),x()&&(v(),"complete"===document.readyState?o():window.addEventListener("load",o))}function a(){zt.slides.classList.add("no-transition"),zt.background=c(zt.wrapper,"div","backgrounds",null),zt.progress=c(zt.wrapper,"div","progress","<span></span>"),zt.progressbar=zt.progress.querySelector("span"),c(zt.wrapper,"aside","controls",'<button class="navigate-left" aria-label="previous slide"></button><button class="navigate-right" aria-label="next slide"></button><button class="navigate-up" aria-label="above slide"></button><button class="navigate-down" aria-label="below slide"></button>'),zt.slideNumber=c(zt.wrapper,"div","slide-number",""),zt.speakerNotes=c(zt.wrapper,"div","speaker-notes",null),zt.speakerNotes.setAttribute("data-prevent-swipe",""),c(zt.wrapper,"div","pause-overlay",null),zt.controls=document.querySelector(".reveal .controls"),zt.theme=document.querySelector("#theme"),zt.wrapper.setAttribute("role","application"),zt.controlsLeft=g(document.querySelectorAll(".navigate-left")),zt.controlsRight=g(document.querySelectorAll(".navigate-right")),zt.controlsUp=g(document.querySelectorAll(".navigate-up")),zt.controlsDown=g(document.querySelectorAll(".navigate-down")),zt.controlsPrev=g(document.querySelectorAll(".navigate-prev")),zt.controlsNext=g(document.querySelectorAll(".navigate-next")),zt.statusDiv=i()}function i(){var e=document.getElementById("aria-status-div");return e||(e=document.createElement("div"),e.style.position="absolute",e.style.height="1px",e.style.width="1px",e.style.overflow="hidden",e.style.clip="rect( 1px, 1px, 1px, 1px )",e.setAttribute("id","aria-status-div"),e.setAttribute("aria-live","polite"),e.setAttribute("aria-atomic","true"),zt.wrapper.appendChild(e)),e}function o(){var e=O(window.innerWidth,window.innerHeight),t=Math.floor(e.width*(1+Ct.margin)),r=Math.floor(e.height*(1+Ct.margin)),n=e.width,a=e.height;k("@page{size:"+t+"px "+r+"px; margin: 0;}"),k(".reveal section>img, .reveal section>video, .reveal section>iframe{max-width: "+n+"px; max-height:"+a+"px}"),document.body.classList.add("print-pdf"),document.body.style.width=t+"px",document.body.style.height=r+"px",g(zt.wrapper.querySelectorAll(Nt)).forEach(function(e,t){e.setAttribute("data-index-h",t),e.classList.contains("stack")&&g(e.querySelectorAll("section")).forEach(function(e,r){e.setAttribute("data-index-h",t),e.setAttribute("data-index-v",r)})}),g(zt.wrapper.querySelectorAll(Mt)).forEach(function(e){if(e.classList.contains("stack")===!1){var i=(t-n)/2,o=(r-a)/2,s=E(e),c=Math.max(Math.ceil(s/r),1);(1===c&&Ct.center||e.classList.contains("center"))&&(o=Math.max((r-s)/2,0)),e.style.left=i+"px",e.style.top=o+"px",e.style.width=n+"px";var l=e.querySelector(".slide-background");if(l&&(l.style.width=t+"px",l.style.height=r*c+"px",l.style.top=-o+"px",l.style.left=-i+"px"),Ct.showNotes){var d=Ce(e);if(d){var u=8,p=document.createElement("div");p.classList.add("speaker-notes"),p.classList.add("speaker-notes-pdf"),p.innerHTML=d,p.style.left=u-i+"px",p.style.bottom=u-o+"px",p.style.width=t-2*u+"px",e.appendChild(p)}}if(Ct.slideNumber){var f=parseInt(e.getAttribute("data-index-h"),10)+1,v=parseInt(e.getAttribute("data-index-v"),10)+1,h=document.createElement("div");h.classList.add("slide-number"),h.classList.add("slide-number-pdf"),h.innerHTML=ue(f,".",v),l.appendChild(h)}}}),g(zt.wrapper.querySelectorAll(Mt+" .fragment")).forEach(function(e){e.classList.add("visible")})}function s(){zt.slides.querySelector("iframe")&&setInterval(function(){(0!==zt.wrapper.scrollTop||0!==zt.wrapper.scrollLeft)&&(zt.wrapper.scrollTop=0,zt.wrapper.scrollLeft=0)},500)}function c(e,t,r,n){for(var a=e.querySelectorAll("."+r),i=0;i<a.length;i++){var o=a[i];if(o.parentNode===e)return o}var s=document.createElement(t);return s.classList.add(r),"string"==typeof n&&(s.innerHTML=n),e.appendChild(s),s}function l(){var e=x();zt.background.innerHTML="",zt.background.classList.add("no-transition"),g(zt.wrapper.querySelectorAll(Nt)).forEach(function(t){var r;r=e?d(t,t):d(t,zt.background),g(t.querySelectorAll("section")).forEach(function(t){e?d(t,t):d(t,r),r.classList.add("stack")})}),Ct.parallaxBackgroundImage?(zt.background.style.backgroundImage='url("'+Ct.parallaxBackgroundImage+'")',zt.background.style.backgroundSize=Ct.parallaxBackgroundSize,setTimeout(function(){zt.wrapper.classList.add("has-parallax-background")},1)):(zt.background.style.backgroundImage="",zt.wrapper.classList.remove("has-parallax-background"))}function d(e,t){var r={background:e.getAttribute("data-background"),backgroundSize:e.getAttribute("data-background-size"),backgroundImage:e.getAttribute("data-background-image"),backgroundVideo:e.getAttribute("data-background-video"),backgroundIframe:e.getAttribute("data-background-iframe"),backgroundColor:e.getAttribute("data-background-color"),backgroundRepeat:e.getAttribute("data-background-repeat"),backgroundPosition:e.getAttribute("data-background-position"),backgroundTransition:e.getAttribute("data-background-transition")},n=document.createElement("div");n.className="slide-background "+e.className.replace(/present|past|future/,""),r.background&&(/^(http|file|\/\/)/gi.test(r.background)||/\.(svg|png|jpg|jpeg|gif|bmp)$/gi.test(r.background)?e.setAttribute("data-background-image",r.background):n.style.background=r.background),(r.background||r.backgroundColor||r.backgroundImage||r.backgroundVideo||r.backgroundIframe)&&n.setAttribute("data-background-hash",r.background+r.backgroundSize+r.backgroundImage+r.backgroundVideo+r.backgroundIframe+r.backgroundColor+r.backgroundRepeat+r.backgroundPosition+r.backgroundTransition),r.backgroundSize&&(n.style.backgroundSize=r.backgroundSize),r.backgroundColor&&(n.style.backgroundColor=r.backgroundColor),r.backgroundRepeat&&(n.style.backgroundRepeat=r.backgroundRepeat),r.backgroundPosition&&(n.style.backgroundPosition=r.backgroundPosition),r.backgroundTransition&&n.setAttribute("data-background-transition",r.backgroundTransition),t.appendChild(n),e.classList.remove("has-dark-background"),e.classList.remove("has-light-background");var a=window.getComputedStyle(n).backgroundColor;if(a){var i=L(a);i&&0!==i.a&&(A(a)<128?e.classList.add("has-dark-background"):e.classList.add("has-light-background"))}return n}function u(){Ct.postMessage&&window.addEventListener("message",function(e){var t=e.data;"string"==typeof t&&"{"===t.charAt(0)&&"}"===t.charAt(t.length-1)&&(t=JSON.parse(t),t.method&&"function"==typeof wt[t.method]&&wt[t.method].apply(wt,t.args))},!1)}function p(e){var t=zt.wrapper.querySelectorAll(Mt).length;zt.wrapper.classList.remove(Ct.transition),"object"==typeof e&&h(Ct,e),Ot.transforms3d===!1&&(Ct.transition="linear"),zt.wrapper.classList.add(Ct.transition),zt.wrapper.setAttribute("data-transition-speed",Ct.transitionSpeed),zt.wrapper.setAttribute("data-background-transition",Ct.backgroundTransition),zt.controls.style.display=Ct.controls?"block":"none",zt.progress.style.display=Ct.progress?"block":"none",zt.slideNumber.style.display=Ct.slideNumber&&!x()?"block":"none",Ct.rtl?zt.wrapper.classList.add("rtl"):zt.wrapper.classList.remove("rtl"),Ct.center?zt.wrapper.classList.add("center"):zt.wrapper.classList.remove("center"),Ct.pause===!1&&J(),Ct.showNotes?zt.speakerNotes.classList.add("visible"):zt.speakerNotes.classList.remove("visible"),Ct.mouseWheel?(document.addEventListener("DOMMouseScroll",it,!1),document.addEventListener("mousewheel",it,!1)):(document.removeEventListener("DOMMouseScroll",it,!1),document.removeEventListener("mousewheel",it,!1)),Ct.rollingLinks?T():I(),Ct.previewLinks?C():(P(),C("[data-preview-link]")),qt&&(qt.destroy(),qt=null),t>1&&Ct.autoSlide&&Ct.autoSlideStoppable&&Ot.canvas&&Ot.requestAnimationFrame&&(qt=new yt(zt.wrapper,function(){return Math.min(Math.max((Date.now()-Ut)/Xt,0),1)}),qt.on("click",bt),Vt=!1),Ct.fragments===!1&&g(zt.slides.querySelectorAll(".fragment")).forEach(function(e){e.classList.add("visible"),e.classList.remove("current-fragment")}),ne()}function f(){if(Yt=!0,window.addEventListener("hashchange",ft,!1),window.addEventListener("resize",vt,!1),Ct.touch&&(zt.wrapper.addEventListener("touchstart",Ge,!1),zt.wrapper.addEventListener("touchmove",et,!1),zt.wrapper.addEventListener("touchend",tt,!1),window.navigator.pointerEnabled?(zt.wrapper.addEventListener("pointerdown",rt,!1),zt.wrapper.addEventListener("pointermove",nt,!1),zt.wrapper.addEventListener("pointerup",at,!1)):window.navigator.msPointerEnabled&&(zt.wrapper.addEventListener("MSPointerDown",rt,!1),zt.wrapper.addEventListener("MSPointerMove",nt,!1),zt.wrapper.addEventListener("MSPointerUp",at,!1))),Ct.keyboard&&(document.addEventListener("keydown",Qe,!1),document.addEventListener("keypress",Je,!1)),Ct.progress&&zt.progress&&zt.progress.addEventListener("click",ot,!1),Ct.focusBodyOnPageVisibilityChange){var e;"hidden"in document?e="visibilitychange":"msHidden"in document?e="msvisibilitychange":"webkitHidden"in document&&(e="webkitvisibilitychange"),e&&document.addEventListener(e,ht,!1)}var t=["touchstart","click"];navigator.userAgent.match(/android/gi)&&(t=["touchstart"]),t.forEach(function(e){zt.controlsLeft.forEach(function(t){t.addEventListener(e,st,!1)}),zt.controlsRight.forEach(function(t){t.addEventListener(e,ct,!1)}),zt.controlsUp.forEach(function(t){t.addEventListener(e,lt,!1)}),zt.controlsDown.forEach(function(t){t.addEventListener(e,dt,!1)}),zt.controlsPrev.forEach(function(t){t.addEventListener(e,ut,!1)}),zt.controlsNext.forEach(function(t){t.addEventListener(e,pt,!1)})})}function v(){Yt=!1,document.removeEventListener("keydown",Qe,!1),document.removeEventListener("keypress",Je,!1),window.removeEventListener("hashchange",ft,!1),window.removeEventListener("resize",vt,!1),zt.wrapper.removeEventListener("touchstart",Ge,!1),zt.wrapper.removeEventListener("touchmove",et,!1),zt.wrapper.removeEventListener("touchend",tt,!1),window.navigator.pointerEnabled?(zt.wrapper.removeEventListener("pointerdown",rt,!1),zt.wrapper.removeEventListener("pointermove",nt,!1),zt.wrapper.removeEventListener("pointerup",at,!1)):window.navigator.msPointerEnabled&&(zt.wrapper.removeEventListener("MSPointerDown",rt,!1),zt.wrapper.removeEventListener("MSPointerMove",nt,!1),zt.wrapper.removeEventListener("MSPointerUp",at,!1)),Ct.progress&&zt.progress&&zt.progress.removeEventListener("click",ot,!1),["touchstart","click"].forEach(function(e){zt.controlsLeft.forEach(function(t){t.removeEventListener(e,st,!1)}),zt.controlsRight.forEach(function(t){t.removeEventListener(e,ct,!1)}),zt.controlsUp.forEach(function(t){t.removeEventListener(e,lt,!1)}),zt.controlsDown.forEach(function(t){t.removeEventListener(e,dt,!1)}),zt.controlsPrev.forEach(function(t){t.removeEventListener(e,ut,!1)}),zt.controlsNext.forEach(function(t){t.removeEventListener(e,pt,!1)})})}function h(e,t){for(var r in t)e[r]=t[r]}function g(e){return Array.prototype.slice.call(e)}function m(e){if("string"==typeof e){if("null"===e)return null;if("true"===e)return!0;if("false"===e)return!1;if(e.match(/^\d+$/))return parseFloat(e)}return e}function b(e,t){var r=e.x-t.x,n=e.y-t.y;return Math.sqrt(r*r+n*n)}function y(e,t){e.style.WebkitTransform=t,e.style.MozTransform=t,e.style.msTransform=t,e.style.transform=t}function w(e){"string"==typeof e.layout&&(Wt.layout=e.layout),"string"==typeof e.overview&&(Wt.overview=e.overview),Wt.layout?y(zt.slides,Wt.layout+" "+Wt.overview):y(zt.slides,Wt.overview)}function k(e){var t=document.createElement("style");t.type="text/css",t.styleSheet?t.styleSheet.cssText=e:t.appendChild(document.createTextNode(e)),document.getElementsByTagName("head")[0].appendChild(t)}function L(e){var t=e.match(/^#([0-9a-f]{3})$/i);if(t&&t[1])return t=t[1],{r:17*parseInt(t.charAt(0),16),g:17*parseInt(t.charAt(1),16),b:17*parseInt(t.charAt(2),16)};var r=e.match(/^#([0-9a-f]{6})$/i);if(r&&r[1])return r=r[1],{r:parseInt(r.substr(0,2),16),g:parseInt(r.substr(2,2),16),b:parseInt(r.substr(4,2),16)};var n=e.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i);if(n)return{r:parseInt(n[1],10),g:parseInt(n[2],10),b:parseInt(n[3],10)};var a=e.match(/^rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\,\s*([\d]+|[\d]*.[\d]+)\s*\)$/i);return a?{r:parseInt(a[1],10),g:parseInt(a[2],10),b:parseInt(a[3],10),a:parseFloat(a[4])}:null}function A(e){return"string"==typeof e&&(e=L(e)),e?(299*e.r+587*e.g+114*e.b)/1e3:null}function E(e){var t=0;if(e){var r=0;g(e.childNodes).forEach(function(e){"number"==typeof e.offsetTop&&e.style&&("absolute"===window.getComputedStyle(e).position&&(r+=1),t=Math.max(t,e.offsetTop+e.offsetHeight))}),0===r&&(t=e.offsetHeight)}return t}function S(e,t){if(t=t||0,e){var r,n=e.style.height;return e.style.height="0px",r=t-e.parentNode.offsetHeight,e.style.height=n+"px",r}return t}function x(){return/print-pdf/gi.test(window.location.search)}function q(){Ct.hideAddressBar&&xt&&(window.addEventListener("load",M,!1),window.addEventListener("orientationchange",M,!1))}function M(){setTimeout(function(){window.scrollTo(0,1)},10)}function N(e,t){var r=document.createEvent("HTMLEvents",1,2);r.initEvent(e,!0,!0),h(r,t),zt.wrapper.dispatchEvent(r),Ct.postMessageEvents&&window.parent!==window.self&&window.parent.postMessage(JSON.stringify({namespace:"reveal",eventName:e,state:Pe()}),"*")}function T(){if(Ot.transforms3d&&!("msPerspective"in document.body.style))for(var e=zt.wrapper.querySelectorAll(Mt+" a"),t=0,r=e.length;r>t;t++){var n=e[t];if(n.textContent&&!n.querySelector("*")&&(!n.className||!n.classList.contains(n,"roll"))){var a=document.createElement("span");a.setAttribute("data-title",n.text),a.innerHTML=n.innerHTML,n.classList.add("roll"),n.innerHTML="",n.appendChild(a)}}}function I(){for(var e=zt.wrapper.querySelectorAll(Mt+" a.roll"),t=0,r=e.length;r>t;t++){var n=e[t],a=n.querySelector("span");a&&(n.classList.remove("roll"),n.innerHTML=a.innerHTML)}}function C(e){var t=g(document.querySelectorAll(e?e:"a"));t.forEach(function(e){/^(http|www)/gi.test(e.getAttribute("href"))&&e.addEventListener("click",mt,!1)})}function P(){var e=g(document.querySelectorAll("a"));e.forEach(function(e){/^(http|www)/gi.test(e.getAttribute("href"))&&e.removeEventListener("click",mt,!1)})}function H(e){R(),zt.overlay=document.createElement("div"),zt.overlay.classList.add("overlay"),zt.overlay.classList.add("overlay-preview"),zt.wrapper.appendChild(zt.overlay),zt.overlay.innerHTML=["<header>",'<a class="close" href="#"><span class="icon"></span></a>','<a class="external" href="'+e+'" target="_blank"><span class="icon"></span></a>',"</header>",'<div class="spinner"></div>','<div class="viewport">','<iframe src="'+e+'"></iframe>',"</div>"].join(""),zt.overlay.querySelector("iframe").addEventListener("load",function(e){zt.overlay.classList.add("loaded")},!1),zt.overlay.querySelector(".close").addEventListener("click",function(e){R(),e.preventDefault()},!1),zt.overlay.querySelector(".external").addEventListener("click",function(e){R()},!1),setTimeout(function(){zt.overlay.classList.add("visible")},1)}function D(){if(Ct.help){R(),zt.overlay=document.createElement("div"),zt.overlay.classList.add("overlay"),zt.overlay.classList.add("overlay-help"),zt.wrapper.appendChild(zt.overlay);var e='<p class="title">Keyboard Shortcuts</p><br/>';e+="<table><th>KEY</th><th>ACTION</th>";for(var t in _t)e+="<tr><td>"+t+"</td><td>"+_t[t]+"</td></tr>";e+="</table>",zt.overlay.innerHTML=["<header>",'<a class="close" href="#"><span class="icon"></span></a>',"</header>",'<div class="viewport">','<div class="viewport-inner">'+e+"</div>","</div>"].join(""),zt.overlay.querySelector(".close").addEventListener("click",function(e){R(),e.preventDefault()},!1),setTimeout(function(){zt.overlay.classList.add("visible")},1)}}function R(){zt.overlay&&(zt.overlay.parentNode.removeChild(zt.overlay),zt.overlay=null)}function W(){if(zt.wrapper&&!x()){var e=O(),t=20;z(Ct.width,Ct.height,t),zt.slides.style.width=e.width+"px",zt.slides.style.height=e.height+"px",Rt=Math.min(e.presentationWidth/e.width,e.presentationHeight/e.height),Rt=Math.max(Rt,Ct.minScale),Rt=Math.min(Rt,Ct.maxScale),1===Rt?(zt.slides.style.zoom="",zt.slides.style.left="",zt.slides.style.top="",zt.slides.style.bottom="",zt.slides.style.right="",w({layout:""})):Rt>1&&!xt&&/chrome/i.test(navigator.userAgent)&&"undefined"!=typeof zt.slides.style.zoom?(zt.slides.style.zoom=Rt,zt.slides.style.left="",zt.slides.style.top="",zt.slides.style.bottom="",zt.slides.style.right="",w({layout:""})):(zt.slides.style.zoom="",zt.slides.style.left="50%",zt.slides.style.top="50%",zt.slides.style.bottom="auto",zt.slides.style.right="auto",w({layout:"translate(-50%, -50%) scale("+Rt+")"}));for(var r=g(zt.wrapper.querySelectorAll(Mt)),n=0,a=r.length;a>n;n++){var i=r[n];"none"!==i.style.display&&(Ct.center||i.classList.contains("center")?i.classList.contains("stack")?i.style.top=0:i.style.top=Math.max((e.height-E(i))/2-t,0)+"px":i.style.top="")}le(),ve()}}function z(e,t,r){g(zt.slides.querySelectorAll("section > .stretch")).forEach(function(r){var n=S(r,t);if(/(img|video)/gi.test(r.nodeName)){var a=r.naturalWidth||r.videoWidth,i=r.naturalHeight||r.videoHeight,o=Math.min(e/a,n/i);r.style.width=a*o+"px",r.style.height=i*o+"px"}else r.style.width=e+"px",r.style.height=n+"px"})}function O(e,t){var r={width:Ct.width,height:Ct.height,presentationWidth:e||zt.wrapper.offsetWidth,presentationHeight:t||zt.wrapper.offsetHeight};return r.presentationWidth-=r.presentationWidth*Ct.margin,r.presentationHeight-=r.presentationHeight*Ct.margin,"string"==typeof r.width&&/%$/.test(r.width)&&(r.width=parseInt(r.width,10)/100*r.presentationWidth),"string"==typeof r.height&&/%$/.test(r.height)&&(r.height=parseInt(r.height,10)/100*r.presentationHeight),r}function B(e,t){"object"==typeof e&&"function"==typeof e.setAttribute&&e.setAttribute("data-previous-indexv",t||0)}function F(e){if("object"==typeof e&&"function"==typeof e.setAttribute&&e.classList.contains("stack")){var t=e.hasAttribute("data-start-indexv")?"data-start-indexv":"data-previous-indexv";return parseInt(e.getAttribute(t)||0,10)}return 0}function Y(){Ct.overview&&!$()&&(Ht=!0,zt.wrapper.classList.add("overview"),zt.wrapper.classList.remove("overview-deactivating"),Ot.overviewTransitions&&setTimeout(function(){zt.wrapper.classList.add("overview-animated")},1),Be(),zt.slides.appendChild(zt.background),g(zt.wrapper.querySelectorAll(Mt)).forEach(function(e){e.classList.contains("stack")||e.addEventListener("click",gt,!0)}),se(),X(),j(),W(),N("overviewshown",{indexh:kt,indexv:Lt,currentSlide:Et}))}function X(){var e=70,t=Ct.width+e,r=Ct.height+e;Ct.rtl&&(t=-t),g(zt.wrapper.querySelectorAll(Nt)).forEach(function(e,n){e.setAttribute("data-index-h",n),y(e,"translate3d("+n*t+"px, 0, 0)"),e.classList.contains("stack")&&g(e.querySelectorAll("section")).forEach(function(e,t){e.setAttribute("data-index-h",n),e.setAttribute("data-index-v",t),y(e,"translate3d(0, "+t*r+"px, 0)")})}),g(zt.background.childNodes).forEach(function(e,n){y(e,"translate3d("+n*t+"px, 0, 0)"),g(e.querySelectorAll(".slide-background")).forEach(function(e,t){y(e,"translate3d(0, "+t*r+"px, 0)")})})}function j(){var e=70,t=Ct.width+e,r=Ct.height+e;Ct.rtl&&(t=-t),w({overview:["translateX("+-kt*t+"px)","translateY("+-Lt*r+"px)","translateZ("+(window.innerWidth<400?-1e3:-2500)+"px)"].join(" ")})}function U(){Ct.overview&&(Ht=!1,zt.wrapper.classList.remove("overview"),zt.wrapper.classList.remove("overview-animated"),zt.wrapper.classList.add("overview-deactivating"),setTimeout(function(){zt.wrapper.classList.remove("overview-deactivating")},1),zt.wrapper.appendChild(zt.background),g(zt.wrapper.querySelectorAll(Mt)).forEach(function(e){y(e,""),e.removeEventListener("click",gt,!0)}),g(zt.background.querySelectorAll(".slide-background")).forEach(function(e){y(e,"")}),w({overview:""}),re(kt,Lt),W(),Oe(),N("overviewhidden",{indexh:kt,indexv:Lt,currentSlide:Et}))}function V(e){"boolean"==typeof e?e?Y():U():$()?U():Y()}function $(){return Ht}function _(e){return e=e?e:Et,e&&e.parentNode&&!!e.parentNode.nodeName.match(/section/i)}function K(){var e=document.body,t=e.requestFullScreen||e.webkitRequestFullscreen||e.webkitRequestFullScreen||e.mozRequestFullScreen||e.msRequestFullscreen;t&&t.apply(e)}function Z(){if(Ct.pause){var e=zt.wrapper.classList.contains("paused");Be(),zt.wrapper.classList.add("paused"),e===!1&&N("paused")}}function J(){var e=zt.wrapper.classList.contains("paused");zt.wrapper.classList.remove("paused"),Oe(),e&&N("resumed")}function Q(e){"boolean"==typeof e?e?Z():J():G()?J():Z()}function G(){return zt.wrapper.classList.contains("paused")}function ee(e){"boolean"==typeof e?e?Ye():Fe():Vt?Ye():Fe()}function te(){return!(!Xt||Vt)}function re(e,t,r,n){At=Et;var a=zt.wrapper.querySelectorAll(Nt);void 0!==t||$()||(t=F(a[e])),At&&At.parentNode&&At.parentNode.classList.contains("stack")&&B(At.parentNode,Lt);var i=Dt.concat();Dt.length=0;var o=kt||0,s=Lt||0;kt=oe(Nt,void 0===e?kt:e),Lt=oe(Tt,void 0===t?Lt:t),se(),W();e:for(var c=0,l=Dt.length;l>c;c++){for(var d=0;d<i.length;d++)if(i[d]===Dt[c]){i.splice(d,1);continue e}document.documentElement.classList.add(Dt[c]),N(Dt[c])}for(;i.length;)document.documentElement.classList.remove(i.pop());$()&&j();var u=a[kt],p=u.querySelectorAll("section");Et=p[Lt]||u,"undefined"!=typeof r&&Re(r);var f=kt!==o||Lt!==s;f?N("slidechanged",{indexh:kt,indexv:Lt,previousSlide:At,currentSlide:Et,origin:n}):At=null,At&&(At.classList.remove("present"),At.setAttribute("aria-hidden","true"),zt.wrapper.querySelector(It).classList.contains("present")&&setTimeout(function(){var e,t=g(zt.wrapper.querySelectorAll(Nt+".stack"));for(e in t)t[e]&&B(t[e],0)},0)),(f||!At)&&(Le(At),we(Et)),zt.statusDiv.textContent=Et.textContent,pe(),le(),fe(),ve(),de(),ce(),qe(),Oe()}function ne(){v(),f(),W(),Xt=Ct.autoSlide,Oe(),l(),qe(),ie(),pe(),le(),fe(!0),de(),se(),ce(),ye(),we(Et),$()&&X()}function ae(){var e=g(zt.wrapper.querySelectorAll(Nt));e.forEach(function(e){var t=g(e.querySelectorAll("section"));t.forEach(function(e,t){t>0&&(e.classList.remove("present"),e.classList.remove("past"),e.classList.add("future"),e.setAttribute("aria-hidden","true"))})})}function ie(){var e=g(zt.wrapper.querySelectorAll(Nt));e.forEach(function(e){var t=g(e.querySelectorAll("section"));t.forEach(function(e,t){De(e.querySelectorAll(".fragment"))}),0===t.length&&De(e.querySelectorAll(".fragment"))})}function oe(e,t){var r=g(zt.wrapper.querySelectorAll(e)),n=r.length,a=x();if(n){Ct.loop&&(t%=n,0>t&&(t=n+t)),t=Math.max(Math.min(t,n-1),0);for(var i=0;n>i;i++){var o=r[i],s=Ct.rtl&&!_(o);if(o.classList.remove("past"),o.classList.remove("present"),o.classList.remove("future"),o.setAttribute("hidden",""),o.setAttribute("aria-hidden","true"),o.querySelector("section")&&o.classList.add("stack"),a)o.classList.add("present");else if(t>i){if(o.classList.add(s?"future":"past"),Ct.fragments)for(var c=g(o.querySelectorAll(".fragment"));c.length;){var l=c.pop();l.classList.add("visible"),l.classList.remove("current-fragment")}}else if(i>t&&(o.classList.add(s?"past":"future"),Ct.fragments))for(var d=g(o.querySelectorAll(".fragment.visible"));d.length;){var u=d.pop();u.classList.remove("visible"),u.classList.remove("current-fragment")}}r[t].classList.add("present"),r[t].removeAttribute("hidden"),r[t].removeAttribute("aria-hidden");var p=r[t].getAttribute("data-state");p&&(Dt=Dt.concat(p.split(" ")))}else t=0;return t}function se(){var e,t,r=g(zt.wrapper.querySelectorAll(Nt)),n=r.length;if(n&&"undefined"!=typeof kt){var a=$()?10:Ct.viewDistance;xt&&(a=$()?6:2),x()&&(a=Number.MAX_VALUE);for(var i=0;n>i;i++){var o=r[i],s=g(o.querySelectorAll("section")),c=s.length;if(e=Math.abs((kt||0)-i)||0,Ct.loop&&(e=Math.abs(((kt||0)-i)%(n-a))||0),a>e?he(o):ge(o),c)for(var l=F(o),d=0;c>d;d++){var u=s[d];t=i===(kt||0)?Math.abs((Lt||0)-d):Math.abs(d-l),a>e+t?he(u):ge(u)}}}}function ce(){Ct.showNotes&&zt.speakerNotes&&Et&&!x()&&(zt.speakerNotes.innerHTML=Ce()||"")}function le(){Ct.progress&&zt.progressbar&&(zt.progressbar.style.width=Ee()*zt.wrapper.offsetWidth+"px")}function de(){if(Ct.slideNumber&&zt.slideNumber){var e=[],t="h.v";switch("string"==typeof Ct.slideNumber&&(t=Ct.slideNumber),t){case"c":e.push(Ae()+1);break;case"c/t":e.push(Ae()+1,"/",Ne());break;case"h/v":e.push(kt+1),_()&&e.push("/",Lt+1);break;default:e.push(kt+1),_()&&e.push(".",Lt+1)}zt.slideNumber.innerHTML=ue(e[0],e[1],e[2])}}function ue(e,t,r){return"number"!=typeof r||isNaN(r)?'<span class="slide-number-a">'+e+"</span>":'<span class="slide-number-a">'+e+'</span><span class="slide-number-delimiter">'+t+'</span><span class="slide-number-b">'+r+"</span>"}function pe(){var e=me(),t=be();zt.controlsLeft.concat(zt.controlsRight).concat(zt.controlsUp).concat(zt.controlsDown).concat(zt.controlsPrev).concat(zt.controlsNext).forEach(function(e){e.classList.remove("enabled"),e.classList.remove("fragmented")}),e.left&&zt.controlsLeft.forEach(function(e){e.classList.add("enabled")}),e.right&&zt.controlsRight.forEach(function(e){e.classList.add("enabled")}),e.up&&zt.controlsUp.forEach(function(e){e.classList.add("enabled")}),e.down&&zt.controlsDown.forEach(function(e){e.classList.add("enabled")}),(e.left||e.up)&&zt.controlsPrev.forEach(function(e){e.classList.add("enabled")}),(e.right||e.down)&&zt.controlsNext.forEach(function(e){e.classList.add("enabled")}),Et&&(t.prev&&zt.controlsPrev.forEach(function(e){e.classList.add("fragmented","enabled")}),t.next&&zt.controlsNext.forEach(function(e){e.classList.add("fragmented","enabled")}),_(Et)?(t.prev&&zt.controlsUp.forEach(function(e){e.classList.add("fragmented","enabled")}),t.next&&zt.controlsDown.forEach(function(e){e.classList.add("fragmented","enabled")})):(t.prev&&zt.controlsLeft.forEach(function(e){e.classList.add("fragmented","enabled")}),t.next&&zt.controlsRight.forEach(function(e){e.classList.add("fragmented","enabled")})))}function fe(e){var t=null,r=Ct.rtl?"future":"past",n=Ct.rtl?"past":"future";if(g(zt.background.childNodes).forEach(function(a,i){a.classList.remove("past"),a.classList.remove("present"),a.classList.remove("future"),kt>i?a.classList.add(r):i>kt?a.classList.add(n):(a.classList.add("present"),t=a),(e||i===kt)&&g(a.querySelectorAll(".slide-background")).forEach(function(e,r){e.classList.remove("past"),e.classList.remove("present"),e.classList.remove("future"),Lt>r?e.classList.add("past"):r>Lt?e.classList.add("future"):(e.classList.add("present"),i===kt&&(t=e))})}),St){var a=St.querySelector("video");a&&a.pause()}if(t){var i=t.querySelector("video");i&&(i.currentTime>0&&(i.currentTime=0),i.play());var o=t.style.backgroundImage||"";/\.gif/i.test(o)&&(t.style.backgroundImage="",window.getComputedStyle(t).opacity,t.style.backgroundImage=o);var s=St?St.getAttribute("data-background-hash"):null,c=t.getAttribute("data-background-hash");c&&c===s&&t!==St&&zt.background.classList.add("no-transition"),St=t}Et&&["has-light-background","has-dark-background"].forEach(function(e){Et.classList.contains(e)?zt.wrapper.classList.add(e):zt.wrapper.classList.remove(e)}),setTimeout(function(){zt.background.classList.remove("no-transition")},1)}function ve(){if(Ct.parallaxBackgroundImage){var e,t,r=zt.wrapper.querySelectorAll(Nt),n=zt.wrapper.querySelectorAll(Tt),a=zt.background.style.backgroundSize.split(" ");1===a.length?e=t=parseInt(a[0],10):(e=parseInt(a[0],10),t=parseInt(a[1],10));var i,o,s=zt.background.offsetWidth,c=r.length;i="number"==typeof Ct.parallaxBackgroundHorizontal?Ct.parallaxBackgroundHorizontal:(e-s)/(c-1),o=i*kt*-1;var l,d,u=zt.background.offsetHeight,p=n.length;l="number"==typeof Ct.parallaxBackgroundVertical?Ct.parallaxBackgroundVertical:(t-u)/(p-1),d=p>0?l*Lt*1:0,zt.background.style.backgroundPosition=o+"px "+-d+"px"}}function he(e){e.style.display="block",g(e.querySelectorAll("img[data-src], video[data-src], audio[data-src]")).forEach(function(e){e.setAttribute("src",e.getAttribute("data-src")),e.removeAttribute("data-src")}),g(e.querySelectorAll("video, audio")).forEach(function(e){var t=0;g(e.querySelectorAll("source[data-src]")).forEach(function(e){e.setAttribute("src",e.getAttribute("data-src")),e.removeAttribute("data-src"),t+=1}),t>0&&e.load()});var t=Me(e),r=Ie(t.h,t.v);if(r&&(r.style.display="block",r.hasAttribute("data-loaded")===!1)){r.setAttribute("data-loaded","true");var n=e.getAttribute("data-background-image"),a=e.getAttribute("data-background-video"),i=e.hasAttribute("data-background-video-loop"),o=e.getAttribute("data-background-iframe");if(n)r.style.backgroundImage="url("+n+")";else if(a&&!Se()){var s=document.createElement("video");i&&s.setAttribute("loop",""),a.split(",").forEach(function(e){s.innerHTML+='<source src="'+e+'">'}),r.appendChild(s)}else if(o){var c=document.createElement("iframe");c.setAttribute("src",o),c.style.width="100%",c.style.height="100%",c.style.maxHeight="100%",c.style.maxWidth="100%",r.appendChild(c)}}}function ge(e){e.style.display="none";var t=Me(e),r=Ie(t.h,t.v);r&&(r.style.display="none")}function me(){var e=zt.wrapper.querySelectorAll(Nt),t=zt.wrapper.querySelectorAll(Tt),r={left:kt>0||Ct.loop,right:kt<e.length-1||Ct.loop,up:Lt>0,down:Lt<t.length-1};if(Ct.rtl){var n=r.left;r.left=r.right,r.right=n}return r}function be(){if(Et&&Ct.fragments){var e=Et.querySelectorAll(".fragment"),t=Et.querySelectorAll(".fragment:not(.visible)");return{prev:e.length-t.length>0,next:!!t.length}}return{prev:!1,next:!1}}function ye(){var e=function(e,t,r){g(zt.slides.querySelectorAll("iframe["+e+'*="'+t+'"]')).forEach(function(t){var n=t.getAttribute(e);n&&-1===n.indexOf(r)&&t.setAttribute(e,n+(/\?/.test(n)?"&":"?")+r)})};e("src","youtube.com/embed/","enablejsapi=1"),e("data-src","youtube.com/embed/","enablejsapi=1"),e("src","player.vimeo.com/","api=1"),e("data-src","player.vimeo.com/","api=1")}function we(e){e&&!Se()&&(g(e.querySelectorAll('img[src$=".gif"]')).forEach(function(e){e.setAttribute("src",e.getAttribute("src"))}),g(e.querySelectorAll("video, audio")).forEach(function(e){
e.hasAttribute("data-autoplay")&&"function"==typeof e.play&&e.play()}),g(e.querySelectorAll("iframe[src]")).forEach(function(e){ke({target:e})}),g(e.querySelectorAll("iframe[data-src]")).forEach(function(e){e.getAttribute("src")!==e.getAttribute("data-src")&&(e.removeEventListener("load",ke),e.addEventListener("load",ke),e.setAttribute("src",e.getAttribute("data-src")))}))}function ke(e){var t=e.target;/youtube\.com\/embed\//.test(t.getAttribute("src"))&&t.hasAttribute("data-autoplay")?t.contentWindow.postMessage('{"event":"command","func":"playVideo","args":""}',"*"):/player\.vimeo\.com\//.test(t.getAttribute("src"))&&t.hasAttribute("data-autoplay")?t.contentWindow.postMessage('{"method":"play"}',"*"):t.contentWindow.postMessage("slide:start","*")}function Le(e){e&&e.parentNode&&(g(e.querySelectorAll("video, audio")).forEach(function(e){e.hasAttribute("data-ignore")||"function"!=typeof e.pause||e.pause()}),g(e.querySelectorAll("iframe")).forEach(function(e){e.contentWindow.postMessage("slide:stop","*"),e.removeEventListener("load",ke)}),g(e.querySelectorAll('iframe[src*="youtube.com/embed/"]')).forEach(function(e){e.hasAttribute("data-ignore")||"function"!=typeof e.contentWindow.postMessage||e.contentWindow.postMessage('{"event":"command","func":"pauseVideo","args":""}',"*")}),g(e.querySelectorAll('iframe[src*="player.vimeo.com/"]')).forEach(function(e){e.hasAttribute("data-ignore")||"function"!=typeof e.contentWindow.postMessage||e.contentWindow.postMessage('{"method":"pause"}',"*")}),g(e.querySelectorAll("iframe[data-src]")).forEach(function(e){e.setAttribute("src","about:blank"),e.removeAttribute("src")}))}function Ae(){var e=g(zt.wrapper.querySelectorAll(Nt)),t=0;e:for(var r=0;r<e.length;r++){for(var n=e[r],a=g(n.querySelectorAll("section")),i=0;i<a.length;i++){if(a[i].classList.contains("present"))break e;t++}if(n.classList.contains("present"))break;n.classList.contains("stack")===!1&&t++}return t}function Ee(){var e=Ne(),t=Ae();if(Et){var r=Et.querySelectorAll(".fragment");if(r.length>0){var n=Et.querySelectorAll(".fragment.visible"),a=.9;t+=n.length/r.length*a}}return t/(e-1)}function Se(){return!!window.location.search.match(/receiver/gi)}function xe(){var e=window.location.hash,t=e.slice(2).split("/"),r=e.replace(/#|\//gi,"");if(isNaN(parseInt(t[0],10))&&r.length){var n;if(/^[a-zA-Z][\w:.-]*$/.test(r)&&(n=document.getElementById(r)),n){var a=wt.getIndices(n);re(a.h,a.v)}else re(kt||0,Lt||0)}else{var i=parseInt(t[0],10)||0,o=parseInt(t[1],10)||0;(i!==kt||o!==Lt)&&re(i,o)}}function qe(e){if(Ct.history)if(clearTimeout(Ft),"number"==typeof e)Ft=setTimeout(qe,e);else if(Et){var t="/",r=Et.getAttribute("id");r&&(r=r.replace(/[^a-zA-Z0-9\-\_\:\.]/g,"")),"string"==typeof r&&r.length?t="/"+r:((kt>0||Lt>0)&&(t+=kt),Lt>0&&(t+="/"+Lt)),window.location.hash=t}}function Me(e){var t,r=kt,n=Lt;if(e){var a=_(e),i=a?e.parentNode:e,o=g(zt.wrapper.querySelectorAll(Nt));r=Math.max(o.indexOf(i),0),n=void 0,a&&(n=Math.max(g(e.parentNode.querySelectorAll("section")).indexOf(e),0))}if(!e&&Et){var s=Et.querySelectorAll(".fragment").length>0;if(s){var c=Et.querySelector(".current-fragment");t=c&&c.hasAttribute("data-fragment-index")?parseInt(c.getAttribute("data-fragment-index"),10):Et.querySelectorAll(".fragment.visible").length-1}}return{h:r,v:n,f:t}}function Ne(){return zt.wrapper.querySelectorAll(Mt+":not(.stack)").length}function Te(e,t){var r=zt.wrapper.querySelectorAll(Nt)[e],n=r&&r.querySelectorAll("section");return n&&n.length&&"number"==typeof t?n?n[t]:void 0:r}function Ie(e,t){if(!x()){var r=zt.wrapper.querySelectorAll(".backgrounds>.slide-background")[e],n=r&&r.querySelectorAll(".slide-background");return n&&n.length&&"number"==typeof t?n?n[t]:void 0:r}var a=Te(e,t);if(a){var i=a.querySelector(".slide-background");if(i&&i.parentNode===a)return i}}function Ce(e){if(e=e||Et,e.hasAttribute("data-notes"))return e.getAttribute("data-notes");var t=e.querySelector("aside.notes");return t?t.innerHTML:null}function Pe(){var e=Me();return{indexh:e.h,indexv:e.v,indexf:e.f,paused:G(),overview:$()}}function He(e){if("object"==typeof e){re(m(e.indexh),m(e.indexv),m(e.indexf));var t=m(e.paused),r=m(e.overview);"boolean"==typeof t&&t!==G()&&Q(t),"boolean"==typeof r&&r!==$()&&V(r)}}function De(e){e=g(e);var t=[],r=[],n=[];e.forEach(function(e,n){if(e.hasAttribute("data-fragment-index")){var a=parseInt(e.getAttribute("data-fragment-index"),10);t[a]||(t[a]=[]),t[a].push(e)}else r.push([e])}),t=t.concat(r);var a=0;return t.forEach(function(e){e.forEach(function(e){n.push(e),e.setAttribute("data-fragment-index",a)}),a++}),n}function Re(e,t){if(Et&&Ct.fragments){var r=De(Et.querySelectorAll(".fragment"));if(r.length){if("number"!=typeof e){var n=De(Et.querySelectorAll(".fragment.visible")).pop();e=n?parseInt(n.getAttribute("data-fragment-index")||0,10):-1}"number"==typeof t&&(e+=t);var a=[],i=[];return g(r).forEach(function(t,r){t.hasAttribute("data-fragment-index")&&(r=parseInt(t.getAttribute("data-fragment-index"),10)),e>=r?(t.classList.contains("visible")||a.push(t),t.classList.add("visible"),t.classList.remove("current-fragment"),zt.statusDiv.textContent=t.textContent,r===e&&t.classList.add("current-fragment")):(t.classList.contains("visible")&&i.push(t),t.classList.remove("visible"),t.classList.remove("current-fragment"))}),i.length&&N("fragmenthidden",{fragment:i[0],fragments:i}),a.length&&N("fragmentshown",{fragment:a[0],fragments:a}),pe(),le(),!(!a.length&&!i.length)}}return!1}function We(){return Re(null,1)}function ze(){return Re(null,-1)}function Oe(){if(Be(),Et){var e=Et.querySelector(".current-fragment"),t=e?e.getAttribute("data-autoslide"):null,r=Et.parentNode?Et.parentNode.getAttribute("data-autoslide"):null,n=Et.getAttribute("data-autoslide");Xt=t?parseInt(t,10):n?parseInt(n,10):r?parseInt(r,10):Ct.autoSlide,0===Et.querySelectorAll(".fragment").length&&g(Et.querySelectorAll("video, audio")).forEach(function(e){e.hasAttribute("data-autoplay")&&Xt&&1e3*e.duration>Xt&&(Xt=1e3*e.duration+1e3)}),!Xt||Vt||G()||$()||wt.isLastSlide()&&!be().next&&Ct.loop!==!0||(jt=setTimeout(_e,Xt),Ut=Date.now()),qt&&qt.setPlaying(-1!==jt)}}function Be(){clearTimeout(jt),jt=-1}function Fe(){Xt&&!Vt&&(Vt=!0,N("autoslidepaused"),clearTimeout(jt),qt&&qt.setPlaying(!1))}function Ye(){Xt&&Vt&&(Vt=!1,N("autoslideresumed"),Oe())}function Xe(){Ct.rtl?($()||We()===!1)&&me().left&&re(kt+1):($()||ze()===!1)&&me().left&&re(kt-1)}function je(){Ct.rtl?($()||ze()===!1)&&me().right&&re(kt-1):($()||We()===!1)&&me().right&&re(kt+1)}function Ue(){($()||ze()===!1)&&me().up&&re(kt,Lt-1)}function Ve(){($()||We()===!1)&&me().down&&re(kt,Lt+1)}function $e(){if(ze()===!1)if(me().up)Ue();else{var e;if(e=Ct.rtl?g(zt.wrapper.querySelectorAll(Nt+".future")).pop():g(zt.wrapper.querySelectorAll(Nt+".past")).pop()){var t=e.querySelectorAll("section").length-1||void 0,r=kt-1;re(r,t)}}}function _e(){We()===!1&&(me().down?Ve():Ct.rtl?Xe():je()),Oe()}function Ke(e){for(;e&&"function"==typeof e.hasAttribute;){if(e.hasAttribute("data-prevent-swipe"))return!0;e=e.parentNode}return!1}function Ze(e){Ct.autoSlideStoppable&&Fe()}function Je(e){e.shiftKey&&63===e.charCode&&(zt.overlay?R():D(!0))}function Qe(e){if("function"==typeof Ct.keyboardCondition&&Ct.keyboardCondition()===!1)return!0;var t=Vt;Ze(e);var r=document.activeElement&&"inherit"!==document.activeElement.contentEditable,n=document.activeElement&&document.activeElement.tagName&&/input|textarea/i.test(document.activeElement.tagName);if(!(r||n||e.shiftKey&&32!==e.keyCode||e.altKey||e.ctrlKey||e.metaKey)){var a,i=[66,190,191];if("object"==typeof Ct.keyboard)for(a in Ct.keyboard)"togglePause"===Ct.keyboard[a]&&i.push(parseInt(a,10));if(G()&&-1===i.indexOf(e.keyCode))return!1;var o=!1;if("object"==typeof Ct.keyboard)for(a in Ct.keyboard)if(parseInt(a,10)===e.keyCode){var s=Ct.keyboard[a];"function"==typeof s?s.apply(null,[e]):"string"==typeof s&&"function"==typeof wt[s]&&wt[s].call(),o=!0}if(o===!1)switch(o=!0,e.keyCode){case 80:case 33:$e();break;case 78:case 34:_e();break;case 72:case 37:Xe();break;case 76:case 39:je();break;case 75:case 38:Ue();break;case 74:case 40:Ve();break;case 36:re(0);break;case 35:re(Number.MAX_VALUE);break;case 32:$()?U():e.shiftKey?$e():_e();break;case 13:$()?U():o=!1;break;case 58:case 59:case 66:case 190:case 191:Q();break;case 70:K();break;case 65:Ct.autoSlideStoppable&&ee(t);break;default:o=!1}o?e.preventDefault&&e.preventDefault():27!==e.keyCode&&79!==e.keyCode||!Ot.transforms3d||(zt.overlay?R():V(),e.preventDefault&&e.preventDefault()),Oe()}}function Ge(e){return Ke(e.target)?!0:($t.startX=e.touches[0].clientX,$t.startY=e.touches[0].clientY,$t.startCount=e.touches.length,void(2===e.touches.length&&Ct.overview&&($t.startSpan=b({x:e.touches[1].clientX,y:e.touches[1].clientY},{x:$t.startX,y:$t.startY}))))}function et(e){if(Ke(e.target))return!0;if($t.captured)navigator.userAgent.match(/android/gi)&&e.preventDefault();else{Ze(e);var t=e.touches[0].clientX,r=e.touches[0].clientY;if(2===e.touches.length&&2===$t.startCount&&Ct.overview){var n=b({x:e.touches[1].clientX,y:e.touches[1].clientY},{x:$t.startX,y:$t.startY});Math.abs($t.startSpan-n)>$t.threshold&&($t.captured=!0,n<$t.startSpan?Y():U()),e.preventDefault()}else if(1===e.touches.length&&2!==$t.startCount){var a=t-$t.startX,i=r-$t.startY;a>$t.threshold&&Math.abs(a)>Math.abs(i)?($t.captured=!0,Xe()):a<-$t.threshold&&Math.abs(a)>Math.abs(i)?($t.captured=!0,je()):i>$t.threshold?($t.captured=!0,Ue()):i<-$t.threshold&&($t.captured=!0,Ve()),Ct.embedded?($t.captured||_(Et))&&e.preventDefault():e.preventDefault()}}}function tt(e){$t.captured=!1}function rt(e){(e.pointerType===e.MSPOINTER_TYPE_TOUCH||"touch"===e.pointerType)&&(e.touches=[{clientX:e.clientX,clientY:e.clientY}],Ge(e))}function nt(e){(e.pointerType===e.MSPOINTER_TYPE_TOUCH||"touch"===e.pointerType)&&(e.touches=[{clientX:e.clientX,clientY:e.clientY}],et(e))}function at(e){(e.pointerType===e.MSPOINTER_TYPE_TOUCH||"touch"===e.pointerType)&&(e.touches=[{clientX:e.clientX,clientY:e.clientY}],tt(e))}function it(e){if(Date.now()-Bt>600){Bt=Date.now();var t=e.detail||-e.wheelDelta;t>0?_e():$e()}}function ot(e){Ze(e),e.preventDefault();var t=g(zt.wrapper.querySelectorAll(Nt)).length,r=Math.floor(e.clientX/zt.wrapper.offsetWidth*t);Ct.rtl&&(r=t-r),re(r)}function st(e){e.preventDefault(),Ze(),Xe()}function ct(e){e.preventDefault(),Ze(),je()}function lt(e){e.preventDefault(),Ze(),Ue()}function dt(e){e.preventDefault(),Ze(),Ve()}function ut(e){e.preventDefault(),Ze(),$e()}function pt(e){e.preventDefault(),Ze(),_e()}function ft(e){xe()}function vt(e){W()}function ht(e){var t=document.webkitHidden||document.msHidden||document.hidden;t===!1&&document.activeElement!==document.body&&("function"==typeof document.activeElement.blur&&document.activeElement.blur(),document.body.focus())}function gt(e){if(Yt&&$()){e.preventDefault();for(var t=e.target;t&&!t.nodeName.match(/section/gi);)t=t.parentNode;if(t&&!t.classList.contains("disabled")&&(U(),t.nodeName.match(/section/gi))){var r=parseInt(t.getAttribute("data-index-h"),10),n=parseInt(t.getAttribute("data-index-v"),10);re(r,n)}}}function mt(e){if(e.currentTarget&&e.currentTarget.hasAttribute("href")){var t=e.currentTarget.getAttribute("href");t&&(H(t),e.preventDefault())}}function bt(e){wt.isLastSlide()&&Ct.loop===!1?(re(0,0),Ye()):Vt?Ye():Fe()}function yt(e,t){this.diameter=50,this.thickness=3,this.playing=!1,this.progress=0,this.progressOffset=1,this.container=e,this.progressCheck=t,this.canvas=document.createElement("canvas"),this.canvas.className="playback",this.canvas.width=this.diameter,this.canvas.height=this.diameter,this.context=this.canvas.getContext("2d"),this.container.appendChild(this.canvas),this.render()}var wt,kt,Lt,At,Et,St,xt,qt,Mt=".slides section",Nt=".slides>section",Tt=".slides>section.present>section",It=".slides>section:first-of-type",Ct={width:960,height:700,margin:.1,minScale:.2,maxScale:1.5,controls:!0,progress:!0,slideNumber:!1,history:!1,keyboard:!0,keyboardCondition:null,overview:!0,center:!0,touch:!0,loop:!1,rtl:!1,fragments:!0,embedded:!1,help:!0,pause:!0,showNotes:!1,autoSlide:0,autoSlideStoppable:!0,mouseWheel:!1,rollingLinks:!1,hideAddressBar:!0,previewLinks:!1,postMessage:!0,postMessageEvents:!1,focusBodyOnPageVisibilityChange:!0,transition:"slide",transitionSpeed:"default",backgroundTransition:"fade",parallaxBackgroundImage:"",parallaxBackgroundSize:"",parallaxBackgroundHorizontal:null,parallaxBackgroundVertical:null,viewDistance:3,dependencies:[]},Pt=!1,Ht=!1,Dt=[],Rt=1,Wt={layout:"",overview:""},zt={},Ot={},Bt=0,Ft=0,Yt=!1,Xt=0,jt=0,Ut=-1,Vt=!1,$t={startX:0,startY:0,startSpan:0,startCount:0,captured:!1,threshold:40},_t={"N  ,  SPACE":"Next slide",P:"Previous slide","&#8592;  ,  H":"Navigate left","&#8594;  ,  L":"Navigate right","&#8593;  ,  K":"Navigate up","&#8595;  ,  J":"Navigate down",Home:"First slide",End:"Last slide","B  ,  .":"Pause",F:"Fullscreen","ESC, O":"Slide overview"};return yt.prototype.setPlaying=function(e){var t=this.playing;this.playing=e,!t&&this.playing?this.animate():this.render()},yt.prototype.animate=function(){var e=this.progress;this.progress=this.progressCheck(),e>.8&&this.progress<.2&&(this.progressOffset=this.progress),this.render(),this.playing&&Ot.requestAnimationFrameMethod.call(window,this.animate.bind(this))},yt.prototype.render=function(){var e=this.playing?this.progress:0,t=this.diameter/2-this.thickness,r=this.diameter/2,n=this.diameter/2,a=14;this.progressOffset+=.1*(1-this.progressOffset);var i=-Math.PI/2+e*(2*Math.PI),o=-Math.PI/2+this.progressOffset*(2*Math.PI);this.context.save(),this.context.clearRect(0,0,this.diameter,this.diameter),this.context.beginPath(),this.context.arc(r,n,t+2,0,2*Math.PI,!1),this.context.fillStyle="rgba( 0, 0, 0, 0.4 )",this.context.fill(),this.context.beginPath(),this.context.arc(r,n,t,0,2*Math.PI,!1),this.context.lineWidth=this.thickness,this.context.strokeStyle="#666",this.context.stroke(),this.playing&&(this.context.beginPath(),this.context.arc(r,n,t,o,i,!1),this.context.lineWidth=this.thickness,this.context.strokeStyle="#fff",this.context.stroke()),this.context.translate(r-a/2,n-a/2),this.playing?(this.context.fillStyle="#fff",this.context.fillRect(0,0,a/2-2,a),this.context.fillRect(a/2+2,0,a/2-2,a)):(this.context.beginPath(),this.context.translate(2,0),this.context.moveTo(0,0),this.context.lineTo(a-2,a/2),this.context.lineTo(0,a),this.context.fillStyle="#fff",this.context.fill()),this.context.restore()},yt.prototype.on=function(e,t){this.canvas.addEventListener(e,t,!1)},yt.prototype.off=function(e,t){this.canvas.removeEventListener(e,t,!1)},yt.prototype.destroy=function(){this.playing=!1,this.canvas.parentNode&&this.container.removeChild(this.canvas)},wt={initialize:e,configure:p,sync:ne,slide:re,left:Xe,right:je,up:Ue,down:Ve,prev:$e,next:_e,navigateFragment:Re,prevFragment:ze,nextFragment:We,navigateTo:re,navigateLeft:Xe,navigateRight:je,navigateUp:Ue,navigateDown:Ve,navigatePrev:$e,navigateNext:_e,layout:W,availableRoutes:me,availableFragments:be,toggleOverview:V,togglePause:Q,toggleAutoSlide:ee,isOverview:$,isPaused:G,isAutoSliding:te,addEventListeners:f,removeEventListeners:v,getState:Pe,setState:He,getProgress:Ee,getIndices:Me,getTotalSlides:Ne,getSlide:Te,getSlideBackground:Ie,getSlideNotes:Ce,getPreviousSlide:function(){return At},getCurrentSlide:function(){return Et},getScale:function(){return Rt},getConfig:function(){return Ct},getQueryHash:function(){var e={};location.search.replace(/[A-Z0-9]+?=([\w\.%-]*)/gi,function(t){e[t.split("=").shift()]=t.split("=").pop()});for(var t in e){var r=e[t];e[t]=m(unescape(r))}return e},isFirstSlide:function(){return 0===kt&&0===Lt},isLastSlide:function(){return Et?Et.nextElementSibling?!1:_(Et)&&Et.parentNode.nextElementSibling?!1:!0:!1},isReady:function(){return Pt},addEventListener:function(e,t,r){"addEventListener"in window&&(zt.wrapper||document.querySelector(".reveal")).addEventListener(e,t,r)},removeEventListener:function(e,t,r){"addEventListener"in window&&(zt.wrapper||document.querySelector(".reveal")).removeEventListener(e,t,r)},triggerKey:function(e){Qe({keyCode:e})}}});
//# sourceMappingURL=data:application/json;base64,
