'use strict';

var _ = require('lodash');

module.exports.resolveConfigGetters = function resolveConfigGetters(obj) {
  var map = _.isArray(obj) ? _.map : _.mapValues;

  return map(obj, function mapValues(val) {
    if (_.isFunction(val)) {
      if (val.name === 'glou$configGetter')
        return val.call(this);
      return val;
    }

    if (_.isObject(val))
      return module.exports.resolveConfigGetters.call(this, val);

    return val;
  }, this);
};

module.exports.handleFunction = function handleFunction(arg) {
  if (!_.isFunction(arg))
    return;

  return arg;
};

module.exports.handleGlouConfig = function handleGlouConfig(arg) {
  if (!_.isFunction(arg) || arg.name !== 'glou$configGetter')
    return;

  return arg;
};

module.exports.handleArrayFunction = function handleArrayFunction(arg, options) {
  if (!_.isArray(arg) || !arg.length || !_.isFunction(arg[0]))
    return;

  return module.exports.internalReduceArgs(arg.shift(), arg, options);
};

module.exports.handleObject = function handleObject(arg) {
  if (!_.isObject(arg) || arg.constructor.name !== 'Object')
    return;

  return _.partial(module.exports.resolveConfigGetters, arg);
};

module.exports.internalReduceArgs = function internalReduceArgs(start, args, options) {
  options = _.defaults(options || {}, {
    argMappers: [
      module.exports.handleFunction,
      module.exports.handleArrayFunction,
      module.exports.handleObject
    ]
  });

  return _.reduce(args, function reduce(acc, arg) {
    var mapped = _.any(options.argMappers, function any(argMapper) {
      var res = argMapper(arg, options);

      if (res) {
        arg = res;
        return true;
      }

      return false;
    });
    if (!mapped)
      arg = _.constant(arg);
    return function streamFn() {
      return acc.call(this).call(this, arg.call(this));
    };
  }, _.curry(start, args.length));
};

module.exports.reduceArgs = function reduceArgs(start, args, options) {
  options = _.defaults(_.clone(options || {}), {
    fn: true,
    array: true,
    obj: true
  });

  options.argMappers = [];
  if (options.fn)
    options.argMappers.push(module.exports.handleFunction);
  else
    options.argMappers.push(module.exports.handleGlouConfig);
  if (options.array)
    options.argMappers.push(module.exports.handleArrayFunction);
  if (options.obj)
    options.argMappers.push(module.exports.handleObject);

  return module.exports.internalReduceArgs(start, args, options);
};
