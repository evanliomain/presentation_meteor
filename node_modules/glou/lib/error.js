'use strict';

var domain = require('domain');
var Transform = require('readable-stream/transform');
var util = require('util');

var _ = require('lodash');
var debug = require('debug')('glou');
var errTree = require('err-tree');
var eos = require('end-of-stream');

var $ = require('./plugins');

function catchErrors(fn) {
  return function $catchErrors() {
    try {
      return fn.apply(this, arguments);
    }
    catch (e) {
      this.emit('error', e);
    }
  };
}

function Reemiter(warnParent) {
  Transform.call(this, {objectMode: true});

  this.errors = [];

  module.exports.GlouError.assert(
    !warnParent || warnParent instanceof Reemiter,
    'Invalid Reemiter creation: parent should be a reemiter too.'
  );

  this.warnParent = warnParent || null;

  this.streamsToWait = [];

  this.on('end', function end() {
    _.each(this.errors, function(error) {
      $.log.warn(error);
    });

    debug('End');
  });
}

util.inherits(Reemiter, Transform);

Reemiter.prototype.$failErrorHandler = function $failErrorHandler(err) {
  this.emit('error', err);
};

Reemiter.prototype.$warnErrorHandler = function $warnErrorHandler(err) {
  if (this.warnParent)
    return this.warnParent.$warnErrorHandler(err);

  this.errors.push((err.stack && err.stack.toString()) || err.message || err);

  if (this._flushCallback)
    this._flush(this._flushCallback);
};

Reemiter.prototype.encapsulate = function encapsulate(streamFn) {
  var d = domain.create();

  d.on('error', (this.warnParent ?
    this.$warnErrorHandler :
    this.$failErrorHandler
  ).bind(this));

  return d.run(function domainRun() {
    var stream = streamFn();

    if (stream._transform)
      stream._transform = catchErrors(stream._transform);
    if (stream._flush)
      stream._flush = catchErrors(stream._flush);

    return stream;
  });
};

Reemiter.prototype.waitFor = function waitFor(streamToWait) {
  if (this.warnParent)
    return this.warnParent.waitFor(streamToWait);

  this.streamsToWait.push(streamToWait);
  eos(streamToWait, {error: false}, function() {
    _.remove(this.streamsToWait, _.identity.bind(null, streamToWait));
    if (this._flushCallback)
      this._flush(this._flushCallback);
  }.bind(this));
};

Reemiter.prototype._flush = function _flush(cb) {
  if (this.warnParent)
    return cb();

  this._flushCallback = cb;
  if (this.streamsToWait.length - this.errors.length <= 0)
    this._flushCallback();
};

Reemiter.prototype._transform = function _transform(chunk, enc, cb) {
  cb(null, chunk);
};

_.merge(module.exports, {
  GlouError: errTree('GlouError', {
    beautifier: errTree.beautifiers.get('complex'),
    selectExerpt: ['!**/node_modules/**', '!' + __dirname + '/**']
  }),
  Reemiter: Reemiter
});
