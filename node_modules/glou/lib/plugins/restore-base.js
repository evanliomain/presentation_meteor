'use strict';

var path = require('path');
var util = require('util');

var _ = require('lodash');
var glob = require('glob');
var glob2base = require('glob2base');
var Transform = require('readable-stream/transform');

var caches = {};

function RestoreBase(cacheUuid, globs) {
  Transform.call(this, {objectMode: true});

  if (!_.isArray(globs))
    globs = [globs];

  this.globs = _.map(globs, function(g) {
    return new glob.Glob(g);
  });

  if (!(cacheUuid in caches))
    caches[cacheUuid] = {};

  this.map = caches[cacheUuid];
}
util.inherits(RestoreBase, Transform);

RestoreBase.prototype._transform = function _transform(vfs, enc, cb) {
  if (path.dirname(vfs.path) !== path.resolve(vfs.base))
    this.map[vfs.path] = vfs.base;

  if (vfs.path in this.map) {
    vfs.base = this.map[vfs.path];
    this.push(vfs);
    return cb();
  }

  var matchingGlob = _.find(this.globs, function(glob) {
    return glob.minimatch.match(path.relative(process.cwd(), vfs.path));
  });

  vfs.base = this.map[vfs.path] = matchingGlob ? path.resolve(glob2base(matchingGlob)) + '/' : vfs.base;

  this.push(vfs);
  return cb();
};

module.exports = function restoreBase(cacheUuid, globs) {
  return new RestoreBase(cacheUuid, globs);
};
module.exports.RestoreBase = RestoreBase;
