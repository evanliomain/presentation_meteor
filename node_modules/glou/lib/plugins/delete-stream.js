'use strict';

var fs = require('fs');
var path = require('path');
var util = require('util');

var _ = require('lodash');
var Transform = require('readable-stream/transform');

function DeleteStream(cache, options, config) {
  Transform.call(this, {objectMode: true});
  this.cache = cache;
  this.options = options;
  this.config = config;
}

util.inherits(DeleteStream, Transform);

DeleteStream.prototype.deleteAllFiles = function(name) {
  if (!this.cache[name])
    return;

  var cacheName = this.cache[name];
  delete this.cache[name];

  _.each(cacheName.$history, this.deleteAllFiles, this);
  delete cacheName.$history;

  _.each(cacheName, function(relative, dest) {
    try {
      fs.unlinkSync(path.resolve(this.options.cwd, path.join(dest, relative)));
    }
    catch (e) {
      // Swallow ENOENT (e.g. file does not exist) : it just means it has already been deleted.
      /* istanbul ignore next */
      if (e.code !== 'ENOENT')
        throw e;
    }
  }, this);
};

DeleteStream.prototype._transform = function(file, enc, done) {
  done(null, file);
};

DeleteStream.prototype._flush = function(cb) {
  _.each(this.config.$changed || {}, function(event) {
    if (event.type !== 'deleted')
      return;

    this.deleteAllFiles(event.path);
  }, this);

  cb();
};

module.exports = function deleteStream(cache, options, config) {
  return new DeleteStream(cache, options, config);
};
module.exports.DeleteStream = DeleteStream;
