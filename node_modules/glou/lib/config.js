'use strict';

var _ = require('lodash');

var error = require('./error');

var Config = module.exports = function Config(config) {
  _.each(config || {}, function(val, key) {
    if (key[0] === '$')
      this[key] = val;
    else
      this[key] = _.clone(val);
  }, this);

  if (!this.$shouldEmit)
    this.$shouldEmit = [];
};

Config.prototype.merge = function merge(config) {
  _.each(config, function(val, key) {
    error.GlouError.assert(
      key[0] !== '$',
      'Cannot override private variable of config (key "' + key + '" should not start with $)'
    );
  });

  var clone = new Config(this);
  _.merge(clone, config);
  return clone;
};

Config.prototype.config = function config(str, defaultValue) {
  if (!str)
    return this;
  var hasDefaultValue = arguments.length >= 2;
  var currentPath = '';
  return _.reduce(str.split('.'), function reduce(dest, prop) {
    currentPath += (currentPath && '.') + prop;
    if (!(prop in dest)) {
      error.GlouError.assert(hasDefaultValue, '"' + currentPath + '" property is not in config object');
      return defaultValue;
    }
    return dest[prop];
  }, this);
};

Config.configGetter = function(key, defaultValue) {
  var hasDefaultValue = arguments.length >= 2;
  return function glou$configGetter() {
    if (!hasDefaultValue)
      return this.config(key);
    return this.config(key, defaultValue);
  };
};
