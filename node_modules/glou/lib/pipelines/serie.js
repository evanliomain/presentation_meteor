'use strict';

var _ = require('lodash');
var debug = require('debug')('glou');
var eos = require('end-of-stream');

var $ = require('../plugins');

module.exports = function $initSerie(streamName, streamFns) {
  streamFns = _.toArray(arguments);

  if (_.isString(streamName))
    streamFns.shift();
  else
    streamName = null;

  if (streamFns.length > 1 || !_.isFunction(streamFns[0]))
    streamFns = _.constant(streamFns);
  else
    streamFns = streamFns[0];

  return this.$decorate(function $serie(parent, config) {
    if (streamName)
      debug('run serie ' + streamName);

    var outStreamFns = streamFns.call(config);

    // Create a noop for each function in & out
    var inStreams = _.map(outStreamFns, $.noop);
    var outStreams = _.map(outStreamFns, $.noop);

    // Pipe parent into each in noop
    _.each(inStreams, function(stream) {
      parent.pipe(stream);
    });

    // Merge all output together to create the result
    var merged = $.merge.apply(null, outStreams);

    var currentFn = 0;

    eos(config.$reemiter, function() {
      currentFn = outStreamFns.length;
    });

    function nextStream() {
      if (currentFn >= outStreamFns.length)
        return;

      config.$reemiter.encapsulate(function() {
        return $.multipipe(
          inStreams[currentFn],
          outStreamFns[currentFn].call(config),
          outStreams[currentFn]
        );
      }, {});

      eos(outStreams[currentFn], function() {
        ++currentFn;

        nextStream();
      });
    }
    nextStream();

    return {
      stream: $.plexer({objectMode: true}, parent, merged),
      config: config
    };
  });
};
