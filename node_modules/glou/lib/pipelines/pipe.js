'use strict';

var debug = require('debug')('glou');
var _ = require('lodash');

var $ = require('../plugins');
var error = require('../error');
var reduceArgs = require('../reduce-args').reduceArgs;
var Config = require('../config');

function checkStream(originalError, stream) {
  var msg;
  var type = 'Stream';
  if (!stream || !_.isObject(stream) || !_.isFunction(stream.pipe)) {
    type = 'Value';
    msg = 'is not a valid stream';
  }
  else if (!stream.readable)
    msg = 'is not readable';
  else if (!stream.writable)
    msg = 'is not writable';
  else if (stream.ended)
    msg = 'is already ended';
  else if (stream._readableState && stream._readableState.ended)
    msg = 'is already ended';
  else if (stream._writableState && stream._writableState.ended)
    msg = 'is already ended';

  error.GlouError.assert(!msg, type + ' returned by the provided function ' + msg, {originalError: originalError});

  return stream;
}

module.exports = function $initPipe(streamName, options, streamFn, args) {
  args = _.toArray(arguments);

  var originalError = new error.GlouError();

  if (_.isString(streamName))
    args.shift();
  else {
    streamFn = options;
    options = streamName;
    streamName = null;
  }

  if (options && _.isObject(options) && !_.isFunction(options))
    args.shift();
  else {
    streamFn = options;
    options = {};
  }

  error.GlouError.assert(_.isFunction(streamFn), 'streamFn should be a function');

  args.shift();

  streamFn = reduceArgs(streamFn, args, options);

  return this.$decorate(function $pipe(parent, config) {
    if (streamName)
      debug('run pipe ' + streamName);

    if (options.error !== 'warn') {
      return {
        stream: config.$reemiter.encapsulate(function() {
          return $.multipipe(
            parent,
            checkStream(originalError, streamFn.call(config)),
            $.noop()
          );
        }),
        config: config
      };
    }

    var warnConfig = new Config(config);
    warnConfig.$reemiter = new error.Reemiter(config.$reemiter);
    var stream = checkStream(originalError, warnConfig.$reemiter.encapsulate(streamFn.bind(warnConfig), options));

    config.$reemiter.waitFor(stream);

    var parentSafe = parent.pipe($.noop());
    parentSafe.pipe($.devnull());
    parentSafe
      .pipe(stream)
      .pipe($.devnull())
    ;

    return {
      stream: parent,
      config: config
    };
  });
};
