'use strict';

var debug = require('debug')('glou');
var _ = require('lodash');

var $ = require('../plugins');

module.exports = function $initParallel(streamName, streamFns) {
  streamFns = _.toArray(arguments);

  if (_.isString(streamName))
    streamFns.shift();
  else
    streamName = null;

  if (streamFns.length > 1 || !_.isFunction(streamFns[0]))
    streamFns = _.constant(streamFns);
  else
    streamFns = streamFns[0];

  return this.$decorate(function $parallel(parent, config) {
    if (streamName)
      debug('run parallel ' + streamName);

    function createPipelines(streamFns) {
      return _.map(streamFns, function mapPipelines(streamFn) {
        if (_.isArray(streamFn))
          return createPipelines.call(this, streamFn);

        return config.$reemiter.encapsulate(function() {
          return $.multipipe(parent, streamFn.call(config));
        }, {});
      }, this);
    }

    var merged = $.merge.apply(null, createPipelines(streamFns.call(config)));

    return {
      stream: $.plexer({objectMode: true}, parent, merged),
      config: config
    };
  });
};
